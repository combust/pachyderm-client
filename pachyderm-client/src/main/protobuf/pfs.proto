syntax = "proto3";
package pfs;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message Repo {
    string name = 1;
}

message Commit {
    Repo repo = 1;
    string id = 2;
}

message Commits {
    repeated Commit commit = 1;
}

message Branches {
    repeated string branches = 1;
}

message File {
    Commit commit = 1;
    string path = 2;
}

message Block {
    string hash = 1;
}

message RepoInfo {
    Repo repo = 1;
    google.protobuf.Timestamp created = 2;
    uint64 size_bytes = 3;
    repeated Repo provenance = 4;
}

message RepoInfos {
    repeated RepoInfo repo_info = 1;
}

enum CommitType {
    COMMIT_TYPE_NONE = 0;
    COMMIT_TYPE_READ = 1;
    COMMIT_TYPE_WRITE = 2;
}


message CommitInfo {
    Commit commit = 1;
    string branch = 2;
    CommitType commit_type = 3;
    Commit parent_commit = 4;
    google.protobuf.Timestamp started = 5;
    google.protobuf.Timestamp finished = 6;
    uint64 size_bytes = 7;
    bool cancelled = 8;
    bool archived = 9;
    repeated Commit provenance = 10;
}

message CommitInfos {
    repeated CommitInfo commit_info = 1;
}

enum FileType {
    FILE_TYPE_NONE = 0;
    FILE_TYPE_REGULAR = 1;
    FILE_TYPE_DIR = 2;
}

message FileInfo {
    File file = 1;
    FileType file_type = 2;
    uint64 size_bytes = 3;
    google.protobuf.Timestamp modified = 4;
    Commit commit_modified = 5;
    repeated File children = 6;
}

message FileInfos {
    repeated FileInfo file_info = 1;
}

message ByteRange {
    uint64 lower = 1;
    uint64 upper = 2;
}

message BlockRef {
    Block block = 1;
    ByteRange range = 2;
}

message BlockRefs {
    repeated BlockRef block_ref = 1;
}

message Append {
    repeated BlockRef block_refs = 1;
    map<string, bool> children = 2;
    Commit last_ref = 3;
    bool delete = 4;
    FileType file_type = 5;
}

message BlockInfo {
    Block block = 1;
    google.protobuf.Timestamp created = 2;
    uint64 size_bytes = 3;
}

message BlockInfos {
    repeated BlockInfo block_info = 1;
}

message Shard {
    uint64 file_number = 1;
    uint64 file_modulus = 2;
    uint64 block_number = 3;
    uint64 block_modulus = 4;
}

message CreateRepoRequest {
    Repo repo = 1;
    repeated Repo provenance = 2;
}

message InspectRepoRequest {
    Repo repo = 1;
}

message ListRepoRequest {
    repeated Repo provenance = 1;
}

message DeleteRepoRequest {
    Repo repo = 1;
    bool force = 2;
}

message StartCommitRequest {
    Commit parent = 1;
    repeated Commit provenance = 2;
}

message ForkCommitRequest {
    Commit parent = 1;
    string branch = 2;
    repeated Commit provenance = 3;
}

message FinishCommitRequest {
    Commit commit = 1;
    bool cancel = 2;
}

message ArchiveCommitRequest {
    repeated Commit commits = 1;
}

message InspectCommitRequest {
    Commit commit = 1;
}

enum CommitStatus {
    NORMAL = 0;
    ARCHIVED = 1;
    CANCELLED = 2;
    ALL = 3;
}

message ListCommitRequest {
    repeated Commit exclude = 1;
    repeated Commit include = 6;
    repeated Commit provenance = 2;
    CommitType commit_type = 3;
    CommitStatus status = 4;
    bool block = 5;
}

message ListBranchRequest {
    Repo repo = 1;
    CommitStatus status = 2;
}

message DeleteCommitRequest {
    Commit commit = 1;
}

message FlushCommitRequest {
    repeated Commit commit = 1;
    repeated Repo to_repo = 2;
}

// DiffMethod specifies how file operations represent changes to files.
// If FromCommit is nil then the whole file will be returned.
// If FromCommit is not nil and FullFile is false then only the changes since
// FromCommit will be returned.
// If FromCommit is not nil and FullFile is true then the whole file will be
// returned if there have been changes since FromCommit.
message DiffMethod {
    Commit from_commit = 1;
    bool full_file = 2;
}

message GetFileRequest {
    File file = 1;
    int64 offset_bytes = 2;
    int64 size_bytes = 3;
    Shard shard = 4;
    DiffMethod diff_method = 5;
}

enum Delimiter {
    NONE = 0;
    JSON = 1;
    LINE = 2;
}

message PutFileRequest {
    File file = 1;
    FileType file_type = 2;
    bytes value = 3;
    Delimiter delimiter = 4;
    string url = 5;
    // applies only to URLs that can be recursively walked, for example s3:// URLs
    bool recursive = 6;
}

message InspectFileRequest {
    File file = 1;
    Shard shard = 2;
    DiffMethod diff_method = 3;
}

enum ListFileMode {
    ListFile_NORMAL = 0;
    ListFile_FAST = 1;
    ListFile_RECURSE = 2;
}

message ListFileRequest {
    File file = 1;
    Shard shard = 2;
    DiffMethod diff_method = 3;
    ListFileMode mode = 4;
}

message DeleteFileRequest {
    File file = 1;
}

message SquashCommitRequest {
    repeated Commit from_commits = 1;
    Commit to_commit = 2;
}

message ReplayCommitRequest {
    repeated Commit from_commits = 1;
    string to_branch = 2;
}

service API {
    // Repo rpcs
    // CreateRepo creates a new repo.
    // An error is returned if the repo already exists.
    rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {}
    // InspectRepo returns info about a repo.
    rpc InspectRepo(InspectRepoRequest) returns (RepoInfo) {}
    // ListRepo returns info about all repos.
    rpc ListRepo(ListRepoRequest) returns (RepoInfos) {}
    // DeleteRepo deletes a repo.
    rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {}

    // Commit rpcs
    // StartCommit creates a new write commit from a parent commit.
    rpc StartCommit(StartCommitRequest) returns (Commit) {}
    // Fork creates a commit on a new branch.
    rpc ForkCommit(ForkCommitRequest) returns (Commit) {}
    // FinishCommit turns a write commit into a read commit.
    rpc FinishCommit(FinishCommitRequest) returns (google.protobuf.Empty) {}
    // ArchiveCommit marks commits as archived, it will be excluded from ListCommit.
    rpc ArchiveCommit(ArchiveCommitRequest) returns (google.protobuf.Empty) {}
    // InspectCommit returns the info about a commit.
    rpc InspectCommit(InspectCommitRequest) returns (CommitInfo) {}
    // ListCommit returns info about all commits.
    rpc ListCommit(ListCommitRequest) returns (CommitInfos) {}
    // DeleteCommit deletes a commit.
    rpc DeleteCommit(DeleteCommitRequest) returns (google.protobuf.Empty) {}
    // FlushCommit waits for downstream commits to finish
    rpc FlushCommit(FlushCommitRequest) returns (CommitInfos) {}
    // ListBranch returns info about the heads of branches.
    rpc ListBranch(ListBranchRequest) returns (Branches) {}
    // Squash returns the head of the commit of the merge
    rpc SquashCommit(SquashCommitRequest) returns (google.protobuf.Empty) {}
    // Replay returns the head of the commit of the merge
    rpc ReplayCommit(ReplayCommitRequest) returns (Commits) {}

    // File rpcs
    // PutFile writes the specified file to pfs.
    rpc PutFile(stream PutFileRequest) returns (google.protobuf.Empty) {}
    // GetFile returns a byte stream of the contents of the file.
    rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
    // InspectFile returns info about a file.
    rpc InspectFile(InspectFileRequest) returns (FileInfo) {}
    // ListFile returns info about all files.
    rpc ListFile(ListFileRequest) returns (FileInfos) {}
    // DeleteFile deletes a file.
    rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}

    // DeleteAll deletes everything
    rpc DeleteAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}
    // ArchiveAll archives everything
    rpc ArchiveAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message PutBlockRequest {
    bytes value = 1;
    Delimiter delimiter = 2;
}

message GetBlockRequest {
    Block block = 1;
    uint64 offset_bytes = 2;
    uint64 size_bytes = 3;
}

message DeleteBlockRequest {
    Block block = 1;
}

message InspectBlockRequest {
    Block block = 1;
}

message ListBlockRequest {
}

service BlockAPI {
    rpc PutBlock(stream PutBlockRequest) returns (BlockRefs) {}
    rpc GetBlock(GetBlockRequest) returns (stream google.protobuf.BytesValue) {}
    rpc DeleteBlock(DeleteBlockRequest) returns (google.protobuf.Empty) {}
    rpc InspectBlock(InspectBlockRequest) returns (BlockInfo) {}
    rpc ListBlock(ListBlockRequest) returns (BlockInfos) {}
}